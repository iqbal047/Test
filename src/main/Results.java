/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package main;

import dao.DatabaseConnector;
import java.awt.event.KeyEvent;
import java.sql.*;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Enjamul
 */
public class Results extends javax.swing.JPanel {

    String vRid, vEid, vEname, vSid, vSname, vTmarks, vOmarks, vGpa, vGrade, gap="";
    DefaultTableModel model;

    public Results() {
        initComponents();
        DataController.loadExamId(tEids);
        DataController.loadStudentsId(tSids);
        DataController.loadResultId(tRids);

        model = new DefaultTableModel();
        rTable.setModel(model);

        model.addColumn("Result ID");
        model.addColumn("Exam ID");
        model.addColumn("Student ID");
        model.addColumn("Student Name");
        model.addColumn("Total Marks");
        model.addColumn("Obtained Marks");
        model.addColumn("GPA");
        model.addColumn("Grade");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        genderGrp = new javax.swing.ButtonGroup();
        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        tGpa = new javax.swing.JTextField();
        tMarks = new javax.swing.JTextField();
        tEname = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        tEids = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        tRids = new javax.swing.JComboBox();
        tSids = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        tSname = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        tOmarks = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        tGrade = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        saveStudent = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        rTable = new javax.swing.JTable();

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setBackground(new java.awt.Color(255, 255, 255));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 51, 255)));

        jLabel1.setText("Exam Name:");

        jLabel3.setText("Student ID:");

        jLabel6.setText("Total Marks:");

        jLabel8.setText("GPA:");

        tGpa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tGpaActionPerformed(evt);
            }
        });

        tMarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tMarksActionPerformed(evt);
            }
        });

        jLabel9.setText("Exam ID:");

        tEids.setEditable(true);
        tEids.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Write Exam ID" }));
        tEids.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                tEidsItemStateChanged(evt);
            }
        });

        jLabel2.setText("Result ID:");

        tRids.setEditable(true);
        tRids.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Write Result ID" }));
        tRids.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                tRidsItemStateChanged(evt);
            }
        });

        tSids.setEditable(true);
        tSids.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select Student ID" }));
        tSids.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                tSidsItemStateChanged(evt);
            }
        });

        jLabel4.setText("Student Name:");

        jLabel5.setText("Obtained Marks:");

        tOmarks.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tOmarksKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tOmarksKeyTyped(evt);
            }
        });

        jLabel7.setText("Grade:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel8)
                            .addComponent(jLabel6))
                        .addGap(27, 27, 27)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(tMarks, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE)
                            .addComponent(tGpa))
                        .addGap(509, 509, 509))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel9)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2))
                        .addGap(27, 27, 27)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tRids, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel5)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(tEids, 0, 259, Short.MAX_VALUE)
                                            .addComponent(tSids, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGap(18, 18, 18)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel4)
                                            .addComponent(jLabel1)))
                                    .addComponent(jLabel7))
                                .addGap(25, 25, 25)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tEname)
                                    .addComponent(tSname)
                                    .addComponent(tOmarks)
                                    .addComponent(tGrade))))
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(tRids, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tEname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel9)
                    .addComponent(tEids, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(tSids, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(tSname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(tMarks, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(tOmarks, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tGpa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(jLabel7)
                    .addComponent(tGrade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(230, 230, 230))
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 51, 255)));

        saveStudent.setBackground(new java.awt.Color(153, 51, 255));
        saveStudent.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        saveStudent.setText("Save");
        saveStudent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveStudentActionPerformed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(153, 51, 255));
        jButton1.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jButton1.setText("Clear");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(153, 51, 255));
        jButton2.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jButton2.setText("All Results");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(153, 51, 255));
        jButton3.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jButton3.setText("All Results Each");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setBackground(new java.awt.Color(153, 51, 255));
        jButton4.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jButton4.setText("Update Results");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setBackground(new java.awt.Color(153, 51, 255));
        jButton5.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jButton5.setText("Present Students");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setBackground(new java.awt.Color(153, 51, 255));
        jButton6.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jButton6.setText("Absent Students");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(saveStudent)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 176, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveStudent)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton4)
                    .addComponent(jButton3)
                    .addComponent(jButton5)
                    .addComponent(jButton6))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.setForeground(new java.awt.Color(255, 255, 255));

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText(" Record Exam Information");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 442, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, 54, Short.MAX_VALUE)
                .addContainerGap())
        );

        rTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(rTable);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void tMarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tMarksActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tMarksActionPerformed

    private void saveStudentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveStudentActionPerformed
        getResultValue();
        if (tRids.getSelectedIndex() < 0 && tEids.getSelectedIndex() > 0 && tSids.getSelectedIndex() > 0 && !vEname.isEmpty() && !vSname.isEmpty() && !vTmarks.isEmpty() && !vOmarks.isEmpty() && !vGpa.isEmpty() && !vGrade.isEmpty()) {
            Connection con = null;
            PreparedStatement pstm = null;
            try {
                con = DatabaseConnector.getConnection();
                pstm = con.prepareStatement("insert into result(e_id, e_name, s_id, s_name, t_marks, o_marks, gpa, grade) values(?, ?, ?, ?, ?, ?, ?, ?)");
                pstm.setString(1, vEid);
                pstm.setString(2, vEname);
                pstm.setString(3, vSid);
                pstm.setString(4, vSname);
                pstm.setString(5, vTmarks);
                pstm.setString(6, vOmarks);
                pstm.setString(7, vGpa);
                pstm.setString(8, vGrade);
                pstm.execute();
                model.addRow(new Object[]{vRid, vEid, vSid, vSname, vTmarks, vOmarks, vGpa, vGrade});
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                try {
                    con.close();
                    pstm.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }

            JOptionPane.showMessageDialog(null, "Exam Saved Successfully!!");
        } else {
            JOptionPane.showMessageDialog(null, "Please Give All Information Properly!!");
        }


    }//GEN-LAST:event_saveStudentActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        clear();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if (rTable.getRowCount() > 0) {
            for (int i = rTable.getRowCount() - 1; i > -1; i--) {
                model.removeRow(i);
            }
        }

        Connection con = null;
        PreparedStatement pstm = null;
        ResultSet rst = null;
        try {
            con = DatabaseConnector.getConnection();
            pstm = con.prepareStatement("select * from result");
            pstm.execute();
            rst = pstm.getResultSet();
            while (rst.next()) {
                vRid = rst.getString("rid");
                vEid = rst.getString("e_id");
                vSid = rst.getString("s_id");
                vSname = rst.getString("s_name");
                vTmarks = rst.getString("t_marks");
                vOmarks = rst.getString("o_marks");
                vGpa = rst.getString("gpa");
                vGrade = rst.getString("grade");

                model.addRow(new Object[]{vRid, vEid, vSid, vSname, vTmarks, vOmarks, vGpa, vGrade});
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                con.close();
                pstm.close();
                rst.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void tEidsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_tEidsItemStateChanged
        if (tEids.getSelectedIndex() > 0) {
            Connection con = null;
            PreparedStatement cstmt = null;
            ResultSet rst = null;
            try {
                con = DatabaseConnector.getConnection();
                cstmt = con.prepareStatement("select * from exam where id = ?");
                cstmt.setString(1, tEids.getSelectedItem().toString());
                cstmt.execute();
                rst = cstmt.getResultSet();
                while (rst.next()) {
                    tEname.setText(rst.getString("e_name"));
                }
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                try {
                    con.close();
                    cstmt.close();
                    rst.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
    }//GEN-LAST:event_tEidsItemStateChanged

    private void tGpaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tGpaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tGpaActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        if (rTable.getRowCount() > 0) {
            for (int i = rTable.getRowCount() - 1; i > -1; i--) {
                model.removeRow(i);
            }
        }
        if (tEids.getSelectedIndex() > 0) {
            Connection con = null;
            PreparedStatement pstm = null;
            ResultSet rst = null;
            try {
                con = DatabaseConnector.getConnection();
                pstm = con.prepareStatement("select distinct s_id, rid, e_id, s_name, t_marks, o_marks, gpa, grade from result where e_id=?");
                pstm.setString(1, tEids.getSelectedItem().toString());
                pstm.execute();
                rst = pstm.getResultSet();
                while (rst.next()) {
                    vRid = rst.getString("rid");
                    vEid = rst.getString("e_id");
                    vSid = rst.getString("s_id");
                    vSname = rst.getString("s_name");
                    vTmarks = rst.getString("t_marks");
                    vOmarks = rst.getString("o_marks");
                    vGpa = rst.getString("gpa");
                    vGrade = rst.getString("grade");

                    model.addRow(new Object[]{vRid, vEid, vSid, vSname, vTmarks, vOmarks, vGpa, vGrade});
                }
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                try {
                    con.close();
                    pstm.close();
                    rst.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please Select a Exam ID");
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void tSidsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_tSidsItemStateChanged
        if (tSids.getSelectedIndex() > 0) {
            Connection con = null;
            PreparedStatement cstmt = null;
            ResultSet rst = null;
            try {
                con = DatabaseConnector.getConnection();
                cstmt = con.prepareStatement("select * from student where s_id = ?");
                cstmt.setString(1, tSids.getSelectedItem().toString());
                cstmt.execute();
                rst = cstmt.getResultSet();
                while (rst.next()) {
                    tSname.setText(rst.getString("name"));
                }
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                try {
                    con.close();
                    cstmt.close();
                    rst.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
    }//GEN-LAST:event_tSidsItemStateChanged

    private void tOmarksKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tOmarksKeyTyped

    }//GEN-LAST:event_tOmarksKeyTyped

    private void tOmarksKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tOmarksKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (tOmarks.getText().equals("")) {
                tGpa.setText("");
                tGrade.setText("");
            } else {
                Double marks = Double.parseDouble(tOmarks.getText());
                Double tmarks = Double.parseDouble(tMarks.getText());
                Double m = marks / tmarks * 100;
                if (m >= 80 && m <= 100) {
                    tGpa.setText("5.00");
                    tGrade.setText("A+");
                } else {
                    if (m >= 70 && m <= 79) {
                        tGpa.setText("4.00");
                        tGrade.setText("A");
                    } else {
                        if (m >= 60 && m <= 69) {
                            tGpa.setText("3.50");
                            tGrade.setText("A-");
                        } else {
                            if (m >= 50 && m <= 59) {
                                tGpa.setText("3.00");
                                tGrade.setText("B");
                            } else {
                                if (m >= 40 && m <= 49) {
                                    tGpa.setText("2.00");
                                    tGrade.setText("C");
                                } else {
                                    if (m >= 33 && m <= 39) {
                                        tGpa.setText("1.00");
                                        tGrade.setText("D");
                                    } else {
                                        if (m >= 0 && m <= 32) {
                                            tGpa.setText("0.00");
                                            tGrade.setText("F");
                                        } else {
                                            tGpa.setText("Invalid");
                                            tGrade.setText("Invalid");
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_tOmarksKeyPressed

    private void tRidsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_tRidsItemStateChanged
        if (tRids.getSelectedIndex() > 0) {
            Connection con = null;
            PreparedStatement cstmt = null;
            ResultSet rst = null;
            try {
                con = DatabaseConnector.getConnection();
                cstmt = con.prepareStatement("select * from result where rid = ?");
                cstmt.setString(1, tRids.getSelectedItem().toString());
                cstmt.execute();
                rst = cstmt.getResultSet();
                while (rst.next()) {
                    tEids.setSelectedItem(rst.getString("e_id"));
                    tSids.setSelectedItem(rst.getString("s_id"));
                    tMarks.setText(rst.getString("t_marks"));
                    tOmarks.setText(rst.getString("o_marks"));
                    tGpa.setText(rst.getString("gpa"));
                    tGrade.setText(rst.getString("grade"));
                }
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                try {
                    con.close();
                    cstmt.close();
                    rst.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
    }//GEN-LAST:event_tRidsItemStateChanged

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        if (rTable.getRowCount() > 0) {
            for (int i = rTable.getRowCount() - 1; i > -1; i--) {
                model.removeRow(i);
            }
        }
        if (tSids.getSelectedIndex() > 0) {
            Connection con = null;
            PreparedStatement pstm = null;
            ResultSet rst = null;
            try {
                con = DatabaseConnector.getConnection();
                pstm = con.prepareStatement("select * from result where s_id=?");
                pstm.setString(1, tSids.getSelectedItem().toString());
                pstm.execute();
                rst = pstm.getResultSet();
                while (rst.next()) {
                    vRid = rst.getString("rid");
                    vEid = rst.getString("e_id");
                    vSid = rst.getString("s_id");
                    vSname = rst.getString("s_name");
                    vTmarks = rst.getString("t_marks");
                    vOmarks = rst.getString("o_marks");
                    vGpa = rst.getString("gpa");
                    vGrade = rst.getString("grade");

                    model.addRow(new Object[]{vRid, vEid, vSid, vSname, vTmarks, vOmarks, vGpa, vGrade});
                }
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                try {
                    con.close();
                    pstm.close();
                    rst.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please Select a Student ID");
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        getResultValue();
        if (rTable.getRowCount() > 0) {
            for (int i = rTable.getRowCount() - 1; i > -1; i--) {
                model.removeRow(i);
            }
        }
        if (tRids.getSelectedIndex() > 0) {
            Connection con = null;
            PreparedStatement pstm = null;

            try {
                con = DatabaseConnector.getConnection();
                pstm = con.prepareStatement("update result set s_id=?, s_name=?, t_marks=?, o_marks=?, gpa=?, grade=? where rid=?");
                pstm.setString(1, vSid);
                pstm.setString(2, vSname);
                pstm.setString(3, vTmarks);
                pstm.setString(4, vOmarks);
                pstm.setString(5, vGpa);
                pstm.setString(6, vGrade);
                pstm.setString(7, tRids.getSelectedItem().toString());
                pstm.execute();
                
                JOptionPane.showMessageDialog(null, "Result Updated!!");

                model.addRow(new Object[]{vRid, vEid, vSid, vSname, vTmarks, vOmarks, vGpa, vGrade});
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                try {
                    con.close();
                    pstm.close();

                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please Select a Result ID");
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        if (rTable.getRowCount() > 0) {
            for (int i = rTable.getRowCount() - 1; i > -1; i--) {
                model.removeRow(i);
            }
        }
        vEid = tEids.getSelectedItem().toString();
        if (tEids.getSelectedIndex() > 0) {
            Connection con = null;
            PreparedStatement pstm = null;
            ResultSet rst = null;
            try {
                con = DatabaseConnector.getConnection();
                pstm = con.prepareStatement("select s_id, name from student s where s_id not in(select s_id from result where e_id=?)");
                pstm.setString(1, tEids.getSelectedItem().toString());
                pstm.execute();
                rst = pstm.getResultSet();
                while (rst.next()) {
                  
                    vSid = rst.getString("s_id");
                    vSname = rst.getString("name");

                    model.addRow(new Object[]{gap, vEid, vSid, vSname, gap, gap, gap, gap});
                }
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                try {
                    con.close();
                    pstm.close();
                    rst.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please Select a Exam ID");
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void getResultValue() {
        vRid = tRids.getSelectedItem().toString();
        vEid = tEids.getSelectedItem().toString();
        vEname = tEname.getText();
        vSid = tSids.getSelectedItem().toString();
        vSname = tSname.getText();
        vTmarks = tMarks.getText();
        vOmarks = tOmarks.getText();
        vGpa = tGpa.getText();
        vGrade = tGrade.getText();
    }

    private void clear() {
        if (rTable.getRowCount() > 0) {
            for (int i = rTable.getRowCount() - 1; i > -1; i--) {
                model.removeRow(i);
            }
        }
        tRids.setSelectedIndex(0);
        tEids.setSelectedIndex(0);
        tSids.setSelectedIndex(0);
        tEname.setText("");
        tSname.setText("");
        tMarks.setText("");
        tOmarks.setText("");
        tGpa.setText("");
        tGrade.setText("");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup genderGrp;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable rTable;
    private javax.swing.JButton saveStudent;
    private javax.swing.JComboBox tEids;
    private javax.swing.JTextField tEname;
    private javax.swing.JTextField tGpa;
    private javax.swing.JTextField tGrade;
    private javax.swing.JTextField tMarks;
    private javax.swing.JTextField tOmarks;
    private javax.swing.JComboBox tRids;
    private javax.swing.JComboBox tSids;
    private javax.swing.JTextField tSname;
    // End of variables declaration//GEN-END:variables
}
